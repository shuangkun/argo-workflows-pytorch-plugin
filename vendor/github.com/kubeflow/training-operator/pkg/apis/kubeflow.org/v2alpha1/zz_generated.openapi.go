//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Copyright 2024 The Kubeflow Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by openapi-gen. DO NOT EDIT.

package v2alpha1

import (
	common "k8s.io/kube-openapi/pkg/common"
	spec "k8s.io/kube-openapi/pkg/validation/spec"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.ClusterTrainingRuntime":           schema_pkg_apis_kubefloworg_v2alpha1_ClusterTrainingRuntime(ref),
		"github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.ClusterTrainingRuntimeList":       schema_pkg_apis_kubefloworg_v2alpha1_ClusterTrainingRuntimeList(ref),
		"github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.ContainerOverride":                schema_pkg_apis_kubefloworg_v2alpha1_ContainerOverride(ref),
		"github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.CoschedulingPodGroupPolicySource": schema_pkg_apis_kubefloworg_v2alpha1_CoschedulingPodGroupPolicySource(ref),
		"github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.DatasetConfig":                    schema_pkg_apis_kubefloworg_v2alpha1_DatasetConfig(ref),
		"github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.InputModel":                       schema_pkg_apis_kubefloworg_v2alpha1_InputModel(ref),
		"github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.JobSetTemplateSpec":               schema_pkg_apis_kubefloworg_v2alpha1_JobSetTemplateSpec(ref),
		"github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.JobStatus":                        schema_pkg_apis_kubefloworg_v2alpha1_JobStatus(ref),
		"github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.MLPolicy":                         schema_pkg_apis_kubefloworg_v2alpha1_MLPolicy(ref),
		"github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.MLPolicySource":                   schema_pkg_apis_kubefloworg_v2alpha1_MLPolicySource(ref),
		"github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.MPIMLPolicySource":                schema_pkg_apis_kubefloworg_v2alpha1_MPIMLPolicySource(ref),
		"github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.ModelConfig":                      schema_pkg_apis_kubefloworg_v2alpha1_ModelConfig(ref),
		"github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.OutputModel":                      schema_pkg_apis_kubefloworg_v2alpha1_OutputModel(ref),
		"github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.PodGroupPolicy":                   schema_pkg_apis_kubefloworg_v2alpha1_PodGroupPolicy(ref),
		"github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.PodGroupPolicySource":             schema_pkg_apis_kubefloworg_v2alpha1_PodGroupPolicySource(ref),
		"github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.PodSpecOverride":                  schema_pkg_apis_kubefloworg_v2alpha1_PodSpecOverride(ref),
		"github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.PodSpecOverrideTargetJob":         schema_pkg_apis_kubefloworg_v2alpha1_PodSpecOverrideTargetJob(ref),
		"github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.RuntimeRef":                       schema_pkg_apis_kubefloworg_v2alpha1_RuntimeRef(ref),
		"github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.TorchElasticPolicy":               schema_pkg_apis_kubefloworg_v2alpha1_TorchElasticPolicy(ref),
		"github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.TorchMLPolicySource":              schema_pkg_apis_kubefloworg_v2alpha1_TorchMLPolicySource(ref),
		"github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.TrainJob":                         schema_pkg_apis_kubefloworg_v2alpha1_TrainJob(ref),
		"github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.TrainJobList":                     schema_pkg_apis_kubefloworg_v2alpha1_TrainJobList(ref),
		"github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.TrainJobSpec":                     schema_pkg_apis_kubefloworg_v2alpha1_TrainJobSpec(ref),
		"github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.TrainJobStatus":                   schema_pkg_apis_kubefloworg_v2alpha1_TrainJobStatus(ref),
		"github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.Trainer":                          schema_pkg_apis_kubefloworg_v2alpha1_Trainer(ref),
		"github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.TrainingRuntime":                  schema_pkg_apis_kubefloworg_v2alpha1_TrainingRuntime(ref),
		"github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.TrainingRuntimeList":              schema_pkg_apis_kubefloworg_v2alpha1_TrainingRuntimeList(ref),
		"github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.TrainingRuntimeSpec":              schema_pkg_apis_kubefloworg_v2alpha1_TrainingRuntimeSpec(ref),
	}
}

func schema_pkg_apis_kubefloworg_v2alpha1_ClusterTrainingRuntime(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ClusterTrainingRuntime represents a training runtime which can be referenced as part of `runtimeRef` API in TrainJob. This resource is a cluster-scoped and can be referenced by TrainJob that created in *any* namespace.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Specification of the desired ClusterTrainingRuntime.",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.TrainingRuntimeSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.TrainingRuntimeSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_kubefloworg_v2alpha1_ClusterTrainingRuntimeList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ClusterTrainingRuntimeList is a collection of cluster training runtimes.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard list metadata.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "List of ClusterTrainingRuntimes.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.ClusterTrainingRuntime"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.ClusterTrainingRuntime", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_kubefloworg_v2alpha1_ContainerOverride(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ContainerOverride represents parameters that can be overridden using PodSpecOverrides. Parameters from the Trainer, DatasetConfig, and ModelConfig will take precedence.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name for the container. TrainingRuntime must have this container.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"command": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Entrypoint commands for the training container.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"args": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Arguments to the entrypoint for the training container.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"env": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"name",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "List of environment variables to set in the container. These values will be merged with the TrainingRuntime's environments.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.EnvVar"),
									},
								},
							},
						},
					},
					"envFrom": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "List of sources to populate environment variables in the container. These   values will be merged with the TrainingRuntime's environments.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.EnvFromSource"),
									},
								},
							},
						},
					},
					"volumeMounts": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"name",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Pod volumes to mount into the container's filesystem.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.VolumeMount"),
									},
								},
							},
						},
					},
				},
				Required: []string{"name"},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.EnvFromSource", "k8s.io/api/core/v1.EnvVar", "k8s.io/api/core/v1.VolumeMount"},
	}
}

func schema_pkg_apis_kubefloworg_v2alpha1_CoschedulingPodGroupPolicySource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CoschedulingPodGroupPolicySource represents configuration for coscheduling plugin. The number of min members in the PodGroupSpec is always equal to the number of nodes.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"scheduleTimeoutSeconds": {
						SchemaProps: spec.SchemaProps{
							Description: "Time threshold to schedule PodGroup for gang-scheduling. If the scheduling timeout is equal to 0, the default value is used. Defaults to 60 seconds.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_kubefloworg_v2alpha1_DatasetConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DatasetConfig represents the desired dataset configuration. When this API is used, the training runtime must have the `dataset-initializer` container in the `Initializer` Job.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"storageUri": {
						SchemaProps: spec.SchemaProps{
							Description: "Storage uri for the dataset provider.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"env": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"name",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "List of environment variables to set in the dataset initializer container. These values will be merged with the TrainingRuntime's dataset initializer environments.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.EnvVar"),
									},
								},
							},
						},
					},
					"secretRef": {
						SchemaProps: spec.SchemaProps{
							Description: "Reference to the secret with credentials to download dataset. Secret must be created in the TrainJob's namespace.",
							Ref:         ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.EnvVar", "k8s.io/api/core/v1.LocalObjectReference"},
	}
}

func schema_pkg_apis_kubefloworg_v2alpha1_InputModel(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "InputModel represents the desired pre-trained model configuration.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"storageUri": {
						SchemaProps: spec.SchemaProps{
							Description: "Storage uri for the model provider.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"env": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"name",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "List of environment variables to set in the model initializer container. These values will be merged with the TrainingRuntime's model initializer environments.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.EnvVar"),
									},
								},
							},
						},
					},
					"secretRef": {
						SchemaProps: spec.SchemaProps{
							Description: "Reference to the secret with credentials to download model. Secret must be created in the TrainJob's namespace.",
							Ref:         ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.EnvVar", "k8s.io/api/core/v1.LocalObjectReference"},
	}
}

func schema_pkg_apis_kubefloworg_v2alpha1_JobSetTemplateSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "JobSetTemplateSpec represents a template of the desired JobSet.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Metadata for custom JobSet's labels and annotations. JobSet name and namespace is equal to the TrainJob's name and namespace.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Specification of the desired JobSet which will be created from TrainJob.",
							Default:     map[string]interface{}{},
							Ref:         ref("sigs.k8s.io/jobset/api/jobset/v1alpha2.JobSetSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta", "sigs.k8s.io/jobset/api/jobset/v1alpha2.JobSetSpec"},
	}
}

func schema_pkg_apis_kubefloworg_v2alpha1_JobStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the child Job.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ready": {
						SchemaProps: spec.SchemaProps{
							Description: "Ready is the number of child Jobs where the number of ready pods and completed pods is greater than or equal to the total expected pod count for the child Job.",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"succeeded": {
						SchemaProps: spec.SchemaProps{
							Description: "Succeeded is the number of successfully completed child Jobs.",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"failed": {
						SchemaProps: spec.SchemaProps{
							Description: "Failed is the number of failed child Jobs.",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"active": {
						SchemaProps: spec.SchemaProps{
							Description: "Active is the number of child Jobs with at least 1 pod in a running or pending state which are not marked for deletion.",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"suspended": {
						SchemaProps: spec.SchemaProps{
							Description: "Suspended is the number of child Jobs which are in a suspended state.",
							Default:     0,
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
				Required: []string{"name", "ready", "succeeded", "failed", "active", "suspended"},
			},
		},
	}
}

func schema_pkg_apis_kubefloworg_v2alpha1_MLPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MLPolicy represents configuration for the model trining with ML-specific parameters.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"numNodes": {
						SchemaProps: spec.SchemaProps{
							Description: "Number of training nodes. Defaults to 1.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"torch": {
						SchemaProps: spec.SchemaProps{
							Description: "Configuration for the PyTorch runtime.",
							Ref:         ref("github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.TorchMLPolicySource"),
						},
					},
					"mpi": {
						SchemaProps: spec.SchemaProps{
							Description: "Configuration for the MPI Runtime.",
							Ref:         ref("github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.MPIMLPolicySource"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.MPIMLPolicySource", "github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.TorchMLPolicySource"},
	}
}

func schema_pkg_apis_kubefloworg_v2alpha1_MLPolicySource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MLPolicySource represents the runtime-specific configuration for various technologies. One of the following specs can be set.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"torch": {
						SchemaProps: spec.SchemaProps{
							Description: "Configuration for the PyTorch runtime.",
							Ref:         ref("github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.TorchMLPolicySource"),
						},
					},
					"mpi": {
						SchemaProps: spec.SchemaProps{
							Description: "Configuration for the MPI Runtime.",
							Ref:         ref("github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.MPIMLPolicySource"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.MPIMLPolicySource", "github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.TorchMLPolicySource"},
	}
}

func schema_pkg_apis_kubefloworg_v2alpha1_MPIMLPolicySource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "MPIMLPolicySource represents a MPI runtime configuration.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"numProcPerNode": {
						SchemaProps: spec.SchemaProps{
							Description: "Number of processes per node. This value is equal to the number of slots for each node in the hostfile.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"mpiImplementation": {
						SchemaProps: spec.SchemaProps{
							Description: "Implementation name for the MPI to create the appropriate hostfile. Defaults to OpenMPI.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"sshAuthMountPath": {
						SchemaProps: spec.SchemaProps{
							Description: "Directory where SSH keys are mounted.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"runLauncherAsNode": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether to run training process on the launcher Job. Defaults to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_kubefloworg_v2alpha1_ModelConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ModelConfig represents the desired model configuration.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"input": {
						SchemaProps: spec.SchemaProps{
							Description: "Configuration of the pre-trained model. When this API is used, the training runtime must have the `model-initializer` container in the `Initializer` Job.",
							Ref:         ref("github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.InputModel"),
						},
					},
					"output": {
						SchemaProps: spec.SchemaProps{
							Description: "Configuration of the trained model. When this API is used, the training runtime must have the `model-exporter` container in the `Exporter` Job.",
							Ref:         ref("github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.OutputModel"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.InputModel", "github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.OutputModel"},
	}
}

func schema_pkg_apis_kubefloworg_v2alpha1_OutputModel(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "OutputModel represents the desired trained model configuration.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"storageUri": {
						SchemaProps: spec.SchemaProps{
							Description: "Storage uri for the model exporter.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"env": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"name",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "List of environment variables to set in the model exporter container. These values will be merged with the TrainingRuntime's model exporter environments.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.EnvVar"),
									},
								},
							},
						},
					},
					"secretRef": {
						SchemaProps: spec.SchemaProps{
							Description: "Reference to the secret with credentials to export model. Secret must be created in the TrainJob's namespace.",
							Ref:         ref("k8s.io/api/core/v1.LocalObjectReference"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.EnvVar", "k8s.io/api/core/v1.LocalObjectReference"},
	}
}

func schema_pkg_apis_kubefloworg_v2alpha1_PodGroupPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PodGroupPolicy represents a PodGroup configuration for gang-scheduling.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"coscheduling": {
						SchemaProps: spec.SchemaProps{
							Description: "Coscheduling plugin from the Kubernetes scheduler-plugins for gang-scheduling.",
							Ref:         ref("github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.CoschedulingPodGroupPolicySource"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.CoschedulingPodGroupPolicySource"},
	}
}

func schema_pkg_apis_kubefloworg_v2alpha1_PodGroupPolicySource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PodGroupPolicySource represents supported plugins for gang-scheduling. Only one of its members may be specified.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"coscheduling": {
						SchemaProps: spec.SchemaProps{
							Description: "Coscheduling plugin from the Kubernetes scheduler-plugins for gang-scheduling.",
							Ref:         ref("github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.CoschedulingPodGroupPolicySource"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.CoschedulingPodGroupPolicySource"},
	}
}

func schema_pkg_apis_kubefloworg_v2alpha1_PodSpecOverride(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PodSpecOverride represents the custom overrides that will be applied for the TrainJob's resources.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"targetJobs": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "TrainJobs is the training job replicas in the training runtime template to apply the overrides.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.PodSpecOverrideTargetJob"),
									},
								},
							},
						},
					},
					"containers": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"name",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Overrides for the containers in the desired job templates.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.ContainerOverride"),
									},
								},
							},
						},
					},
					"initContainers": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"name",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Overrides for the init container in the desired job templates.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.ContainerOverride"),
									},
								},
							},
						},
					},
					"volumes": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"name",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Overrides for the Pod volume configuration.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.Volume"),
									},
								},
							},
						},
					},
					"serviceAccountName": {
						SchemaProps: spec.SchemaProps{
							Description: "Override for the service account.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nodeSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "Override for the node selector to place Pod on the specific mode.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"tolerations": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Override for the Pod's tolerations.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.Toleration"),
									},
								},
							},
						},
					},
				},
				Required: []string{"targetJobs"},
			},
		},
		Dependencies: []string{
			"github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.ContainerOverride", "github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.PodSpecOverrideTargetJob", "k8s.io/api/core/v1.Toleration", "k8s.io/api/core/v1.Volume"},
	}
}

func schema_pkg_apis_kubefloworg_v2alpha1_PodSpecOverrideTargetJob(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the target training job name for which the PodSpec is overridden.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name"},
			},
		},
	}
}

func schema_pkg_apis_kubefloworg_v2alpha1_RuntimeRef(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RuntimeRef represents the reference to the existing training runtime.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the runtime being referenced. When namespaced-scoped TrainingRuntime is used, the TrainJob must have the same namespace as the deployed runtime.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiGroup": {
						SchemaProps: spec.SchemaProps{
							Description: "APIGroup of the runtime being referenced. Defaults to `kubeflow.org`.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind of the runtime being referenced. Defaults to ClusterTrainingRuntime.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name"},
			},
		},
	}
}

func schema_pkg_apis_kubefloworg_v2alpha1_TorchElasticPolicy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TorchElasticPolicy represents a configuration for the PyTorch elastic training. If this policy is set, the `.spec.numNodes` parameter must be omitted, since min and max node is used to configure the `torchrun` CLI argument: `--nnodes=minNodes:maxNodes`. Only `c10d` backend is supported for the Rendezvous communication.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"maxRestarts": {
						SchemaProps: spec.SchemaProps{
							Description: "How many times the training job can be restarted. This value is inserted into the `--max-restarts` argument of the `torchrun` CLI and the `.spec.failurePolicy.maxRestarts` parameter of the training Job.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"minNodes": {
						SchemaProps: spec.SchemaProps{
							Description: "Lower limit for the number of nodes to which training job can scale down.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"maxNodes": {
						SchemaProps: spec.SchemaProps{
							Description: "Upper limit for the number of nodes to which training job can scale up.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"metrics": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Specification which are used to calculate the desired number of nodes. See the individual metric source types for more information about how each type of metric must respond. The HPA will be created to perform auto-scaling.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/autoscaling/v2.MetricSpec"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/autoscaling/v2.MetricSpec"},
	}
}

func schema_pkg_apis_kubefloworg_v2alpha1_TorchMLPolicySource(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TorchMLPolicySource represents a PyTorch runtime configuration.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"numProcPerNode": {
						SchemaProps: spec.SchemaProps{
							Description: "Number of processes per node. This value is inserted into the `--nproc-per-node` argument of the `torchrun` CLI. Supported values: `auto`, `cpu`, `gpu`, or int value. Defaults to `auto`.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"elasticPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Elastic policy for the PyTorch training.",
							Ref:         ref("github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.TorchElasticPolicy"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.TorchElasticPolicy"},
	}
}

func schema_pkg_apis_kubefloworg_v2alpha1_TrainJob(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TrainJob represents configuration of a training job.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Specification of the desired TrainJob.",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.TrainJobSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Current status of TrainJob.",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.TrainJobStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.TrainJobSpec", "github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.TrainJobStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_kubefloworg_v2alpha1_TrainJobList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TrainJobList is a collection of training jobs.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard list metadata.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "List of TrainJobs.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.TrainJob"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.TrainJob", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_kubefloworg_v2alpha1_TrainJobSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TrainJobSpec represents specification of the desired TrainJob.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"runtimeRef": {
						SchemaProps: spec.SchemaProps{
							Description: "Reference to the training runtime. The field is immutable.",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.RuntimeRef"),
						},
					},
					"trainer": {
						SchemaProps: spec.SchemaProps{
							Description: "Configuration of the desired trainer.",
							Ref:         ref("github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.Trainer"),
						},
					},
					"datasetConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "Configuration of the training dataset.",
							Ref:         ref("github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.DatasetConfig"),
						},
					},
					"modelConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "Configuration of the pre-trained and trained model.",
							Ref:         ref("github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.ModelConfig"),
						},
					},
					"labels": {
						SchemaProps: spec.SchemaProps{
							Description: "Labels to apply for the derivative JobSet and Jobs. They will be merged with the TrainingRuntime values.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"annotations": {
						SchemaProps: spec.SchemaProps{
							Description: "Annotations to apply for the derivative JobSet and Jobs. They will be merged with the TrainingRuntime values.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"podSpecOverrides": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Custom overrides for the training runtime.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.PodSpecOverride"),
									},
								},
							},
						},
					},
					"suspend": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether the controller should suspend the running TrainJob. Defaults to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"managedBy": {
						SchemaProps: spec.SchemaProps{
							Description: "ManagedBy is used to indicate the controller or entity that manages a TrainJob. The value must be either an empty, `kubeflow.org/trainjob-controller` or `kueue.x-k8s.io/multikueue`. The built-in TrainJob controller reconciles TrainJob which don't have this field at all or the field value is the reserved string `kubeflow.org/trainjob-controller`, but delegates reconciling TrainJobs with a 'kueue.x-k8s.io/multikueue' to the Kueue. The field is immutable. Defaults to `kubeflow.org/trainjob-controller`",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"runtimeRef"},
			},
		},
		Dependencies: []string{
			"github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.DatasetConfig", "github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.ModelConfig", "github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.PodSpecOverride", "github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.RuntimeRef", "github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.Trainer"},
	}
}

func schema_pkg_apis_kubefloworg_v2alpha1_TrainJobStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TrainJobStatus represents the current status of TrainJob.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"type",
								},
								"x-kubernetes-list-type":       "map",
								"x-kubernetes-patch-merge-key": "type",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Conditions for the TrainJob.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.Condition"),
									},
								},
							},
						},
					},
					"jobsStatus": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"name",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "JobsStatus tracks the child Jobs in TrainJob.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.JobStatus"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.JobStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.Condition"},
	}
}

func schema_pkg_apis_kubefloworg_v2alpha1_Trainer(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Trainer represents the desired trainer configuration. Every training runtime contains `trainer` container which represents Trainer.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "Docker image for the training container.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"command": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Entrypoint commands for the training container.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"args": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Arguments to the entrypoint for the training container.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"env": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"name",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "List of environment variables to set in the training container. These values will be merged with the TrainingRuntime's trainer environments.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.EnvVar"),
									},
								},
							},
						},
					},
					"numNodes": {
						SchemaProps: spec.SchemaProps{
							Description: "Number of training nodes.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"resourcesPerNode": {
						SchemaProps: spec.SchemaProps{
							Description: "Compute resources for each training node.",
							Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
					"numProcPerNode": {
						SchemaProps: spec.SchemaProps{
							Description: "Number of processes/workers/slots on every training node. For the Torch runtime: `auto`, `cpu`, `gpu`, or int value can be set. For the MPI runtime only int value can be set.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.EnvVar", "k8s.io/api/core/v1.ResourceRequirements"},
	}
}

func schema_pkg_apis_kubefloworg_v2alpha1_TrainingRuntime(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TrainingRuntime represents a training runtime which can be referenced as part of `runtimeRef` API in TrainJob. This resource is a namespaced-scoped and can be referenced by TrainJob that created in the *same* namespace as the TrainingRuntime.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard object's metadata.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "Specification of the desired TrainingRuntime.",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.TrainingRuntimeSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.TrainingRuntimeSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_kubefloworg_v2alpha1_TrainingRuntimeList(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TrainingRuntimeList is a collection of training runtimes.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Description: "Standard list metadata.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
						},
					},
					"items": {
						SchemaProps: spec.SchemaProps{
							Description: "List of TrainingRuntimes.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.TrainingRuntime"),
									},
								},
							},
						},
					},
				},
				Required: []string{"items"},
			},
		},
		Dependencies: []string{
			"github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.TrainingRuntime", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
	}
}

func schema_pkg_apis_kubefloworg_v2alpha1_TrainingRuntimeSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "TrainingRuntimeSpec represents a specification of the desired training runtime.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"mlPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Configuration for the model training with ML-specific parameters.",
							Ref:         ref("github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.MLPolicy"),
						},
					},
					"podGroupPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Configuration for the PodGroup to enable gang-scheduling via supported plugins.",
							Ref:         ref("github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.PodGroupPolicy"),
						},
					},
					"template": {
						SchemaProps: spec.SchemaProps{
							Description: "JobSet template which will be used by TrainJob.",
							Default:     map[string]interface{}{},
							Ref:         ref("github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.JobSetTemplateSpec"),
						},
					},
				},
				Required: []string{"template"},
			},
		},
		Dependencies: []string{
			"github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.JobSetTemplateSpec", "github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.MLPolicy", "github.com/kubeflow/training-operator/pkg/apis/kubeflow.org/v2alpha1.PodGroupPolicy"},
	}
}
